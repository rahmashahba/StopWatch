
Keypad_Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000233c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  0000233c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000e0  008000e0  00002450  2**0
                  ALLOC
  3 .stab         00001f14  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e5e  00000000  00000000  00004364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000051c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009141  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000990f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <main>
      8a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSetHalfDataPort>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

#if CLCD_u8BIT_MODE == FOUR_BIT
static void voidSetHalfDataPort(uint8 Copy_u8Data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN, GET_BIT(Copy_u8Data,0));
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	98 2f       	mov	r25, r24
     b56:	91 70       	andi	r25, 0x01	; 1
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	49 2f       	mov	r20, r25
     b5e:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN, GET_BIT(Copy_u8Data,1));
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	86 95       	lsr	r24
     b66:	98 2f       	mov	r25, r24
     b68:	91 70       	andi	r25, 0x01	; 1
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	49 2f       	mov	r20, r25
     b70:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN, GET_BIT(Copy_u8Data,2));
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	86 95       	lsr	r24
     b78:	86 95       	lsr	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	91 70       	andi	r25, 0x01	; 1
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	49 2f       	mov	r20, r25
     b84:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN, GET_BIT(Copy_u8Data,3));
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	98 2f       	mov	r25, r24
     b92:	91 70       	andi	r25, 0x01	; 1
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	49 2f       	mov	r20, r25
     b9a:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
}
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	2e 97       	sbiw	r28, 0x0e	; 14
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN, DIO_u8PIN_HIGH);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e4       	ldi	r27, 0x40	; 64
     bcc:	8b 87       	std	Y+11, r24	; 0x0b
     bce:	9c 87       	std	Y+12, r25	; 0x0c
     bd0:	ad 87       	std	Y+13, r26	; 0x0d
     bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a e7       	ldi	r20, 0x7A	; 122
     be2:	55 e4       	ldi	r21, 0x45	; 69
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	8f 83       	std	Y+7, r24	; 0x07
     bee:	98 87       	std	Y+8, r25	; 0x08
     bf0:	a9 87       	std	Y+9, r26	; 0x09
     bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf4:	6f 81       	ldd	r22, Y+7	; 0x07
     bf6:	78 85       	ldd	r23, Y+8	; 0x08
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <voidSendEnablePulse+0x70>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c16:	6f 81       	ldd	r22, Y+7	; 0x07
     c18:	78 85       	ldd	r23, Y+8	; 0x08
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c30:	7c 85       	ldd	r23, Y+12	; 0x0c
     c32:	8d 85       	ldd	r24, Y+13	; 0x0d
     c34:	9e 85       	ldd	r25, Y+14	; 0x0e
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <voidSendEnablePulse+0xd0>
     c58:	80 e9       	ldi	r24, 0x90	; 144
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <voidSendEnablePulse+0xbe>
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f7       	brne	.-38     	; 0xc58 <voidSendEnablePulse+0xb2>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	6f 81       	ldd	r22, Y+7	; 0x07
     c82:	78 85       	ldd	r23, Y+8	; 0x08
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9e 83       	std	Y+6, r25	; 0x06
     c92:	8d 83       	std	Y+5, r24	; 0x05
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <voidSendEnablePulse+0xfa>
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN, DIO_u8PIN_LOW);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
}
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Cmd);
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the command first*/
	voidSetHalfDataPort(Copy_u8Cmd >> 4);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	82 95       	swap	r24
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     ce4:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Cmd);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cee:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	0f 92       	push	r0
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Data);
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the data first*/
	voidSetHalfDataPort(Copy_u8Data >> 4);
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	82 95       	swap	r24
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d1a:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Data);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d24:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif
}
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2e 97       	sbiw	r28, 0x0e	; 14
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e2       	ldi	r26, 0x20	; 32
     d4a:	b2 e4       	ldi	r27, 0x42	; 66
     d4c:	8b 87       	std	Y+11, r24	; 0x0b
     d4e:	9c 87       	std	Y+12, r25	; 0x0c
     d50:	ad 87       	std	Y+13, r26	; 0x0d
     d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a e7       	ldi	r20, 0x7A	; 122
     d62:	55 e4       	ldi	r21, 0x45	; 69
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	98 87       	std	Y+8, r25	; 0x08
     d70:	a9 87       	std	Y+9, r26	; 0x09
     d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <CLCD_voidInit+0x66>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <CLCD_voidInit+0xc6>
     dd8:	80 e9       	ldi	r24, 0x90	; 144
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <CLCD_voidInit+0xb4>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <CLCD_voidInit+0xa8>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <CLCD_voidInit+0xf0>
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, Font size: 5x7*/
#if CLCD_u8BIT_MODE == EIGHT_BIT
	CLCD_voidSendCmd(0b00111000);

#elif  CLCD_u8BIT_MODE == FOUR_BIT
	voidSetHalfDataPort(0b0010);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b0010);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e38:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(0b1000);
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     e42:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#endif

	/*Display on off control : Display on, cursor off, blink cursor off*/
	CLCD_voidSendCmd(0b00001100);
     e46:	8c e0       	ldi	r24, 0x0C	; 12
     e48:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

	/*Clear display*/
	CLCD_voidSendCmd(1);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

}
     e52:	2e 96       	adiw	r28, 0x0e	; 14
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_pchString)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <CLCD_u8SendString+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <CLCD_u8SendString+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
     e74:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pchString != NULL)
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	e1 f0       	breq	.+56     	; 0xeb6 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Iterator=0u;
     e7e:	19 82       	std	Y+1, r1	; 0x01
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <CLCD_u8SendString+0x3a>
		while(Copy_pchString[Local_u8Iterator] != '\0')
		{
			CLCD_voidSendData(Copy_pchString[Local_u8Iterator]);
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	fc 01       	movw	r30, r24
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	80 81       	ld	r24, Z
     e94:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			Local_u8Iterator++;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState = OK;
	if(Copy_pchString != NULL)
	{
		uint8 Local_u8Iterator=0u;
		while(Copy_pchString[Local_u8Iterator] != '\0')
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	fc 01       	movw	r30, r24
     eaa:	e2 0f       	add	r30, r18
     eac:	f3 1f       	adc	r31, r19
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	39 f7       	brne	.-50     	; 0xe82 <CLCD_u8SendString+0x1e>
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <CLCD_u8SendString+0x56>
			Local_u8Iterator++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	61 97       	sbiw	r28, 0x11	; 17
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	6e 87       	std	Y+14, r22	; 0x0e
     ee0:	7f 87       	std	Y+15, r23	; 0x0f
     ee2:	88 8b       	std	Y+16, r24	; 0x10
     ee4:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumber[10];
	uint8 Local_u8RightDigit, Local_u8Counter1=0u;
     ee6:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if(Copy_s32Number ==0)
     ee8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eea:	9f 85       	ldd	r25, Y+15	; 0x0f
     eec:	a8 89       	ldd	r26, Y+16	; 0x10
     eee:	b9 89       	ldd	r27, Y+17	; 0x11
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	a1 05       	cpc	r26, r1
     ef4:	b1 05       	cpc	r27, r1
     ef6:	21 f4       	brne	.+8      	; 0xf00 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     efe:	67 c0       	rjmp	.+206    	; 0xfce <CLCD_voidSendNumber+0x104>
		return ;
	}
	else if(Copy_s32Number < 0)
     f00:	8e 85       	ldd	r24, Y+14	; 0x0e
     f02:	9f 85       	ldd	r25, Y+15	; 0x0f
     f04:	a8 89       	ldd	r26, Y+16	; 0x10
     f06:	b9 89       	ldd	r27, Y+17	; 0x11
     f08:	bb 23       	and	r27, r27
     f0a:	0c f0       	brlt	.+2      	; 0xf0e <CLCD_voidSendNumber+0x44>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <CLCD_voidSendNumber+0xca>
	{
		/*Number is -ve, make it positive, print -ve sign on the CLCD*/
		Copy_s32Number *= -1;
     f0e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f10:	9f 85       	ldd	r25, Y+15	; 0x0f
     f12:	a8 89       	ldd	r26, Y+16	; 0x10
     f14:	b9 89       	ldd	r27, Y+17	; 0x11
     f16:	b0 95       	com	r27
     f18:	a0 95       	com	r26
     f1a:	90 95       	com	r25
     f1c:	81 95       	neg	r24
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	af 4f       	sbci	r26, 0xFF	; 255
     f22:	bf 4f       	sbci	r27, 0xFF	; 255
     f24:	8e 87       	std	Y+14, r24	; 0x0e
     f26:	9f 87       	std	Y+15, r25	; 0x0f
     f28:	a8 8b       	std	Y+16, r26	; 0x10
     f2a:	b9 8b       	std	Y+17, r27	; 0x11

		CLCD_voidSendData('-');
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     f32:	30 c0       	rjmp	.+96     	; 0xf94 <CLCD_voidSendNumber+0xca>
	}

	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = (uint8)((uint32)Copy_s32Number % 10); /*Get the right most digit*/
     f34:	8e 85       	ldd	r24, Y+14	; 0x0e
     f36:	9f 85       	ldd	r25, Y+15	; 0x0f
     f38:	a8 89       	ldd	r26, Y+16	; 0x10
     f3a:	b9 89       	ldd	r27, Y+17	; 0x11
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 28 11 	call	0x2250	; 0x2250 <__udivmodsi4>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8b 83       	std	Y+3, r24	; 0x03

		Copy_s32Number /= 10;	/*remove the right most digit*/
     f52:	8e 85       	ldd	r24, Y+14	; 0x0e
     f54:	9f 85       	ldd	r25, Y+15	; 0x0f
     f56:	a8 89       	ldd	r26, Y+16	; 0x10
     f58:	b9 89       	ldd	r27, Y+17	; 0x11
     f5a:	2a e0       	ldi	r18, 0x0A	; 10
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 4a 11 	call	0x2294	; 0x2294 <__divmodsi4>
     f6a:	da 01       	movw	r26, r20
     f6c:	c9 01       	movw	r24, r18
     f6e:	8e 87       	std	Y+14, r24	; 0x0e
     f70:	9f 87       	std	Y+15, r25	; 0x0f
     f72:	a8 8b       	std	Y+16, r26	; 0x10
     f74:	b9 8b       	std	Y+17, r27	; 0x11

		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	48 2f       	mov	r20, r24
     f80:	40 5d       	subi	r20, 0xD0	; 208
     f82:	ce 01       	movw	r24, r28
     f84:	04 96       	adiw	r24, 0x04	; 4
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	40 83       	st	Z, r20

		Local_u8Counter1++;
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number *= -1;

		CLCD_voidSendData('-');
	}

	while(Copy_s32Number != 0)
     f94:	8e 85       	ldd	r24, Y+14	; 0x0e
     f96:	9f 85       	ldd	r25, Y+15	; 0x0f
     f98:	a8 89       	ldd	r26, Y+16	; 0x10
     f9a:	b9 89       	ldd	r27, Y+17	; 0x11
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	a1 05       	cpc	r26, r1
     fa0:	b1 05       	cpc	r27, r1
     fa2:	41 f6       	brne	.-112    	; 0xf34 <CLCD_voidSendNumber+0x6a>
		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/

		Local_u8Counter1++;
	}

	for(Local_s8Counter2 = (sint8)Local_u8Counter1 -1 ; Local_s8Counter2 >= 0 ; Local_s8Counter2--)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	81 50       	subi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <CLCD_voidSendNumber+0xfe>
	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	ce 01       	movw	r24, r28
     fb4:	04 96       	adiw	r24, 0x04	; 4
     fb6:	fc 01       	movw	r30, r24
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	80 81       	ld	r24, Z
     fbe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		Local_chNumber[Local_u8Counter1] = Local_u8RightDigit + '0'; /*Convert to to ASCII*/

		Local_u8Counter1++;
	}

	for(Local_s8Counter2 = (sint8)Local_u8Counter1 -1 ; Local_s8Counter2 >= 0 ; Local_s8Counter2--)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	81 50       	subi	r24, 0x01	; 1
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	88 23       	and	r24, r24
     fcc:	7c f7       	brge	.-34     	; 0xfac <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
	}

}
     fce:	61 96       	adiw	r28, 0x11	; 17
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <CLCD_voidGoToXY+0x6>
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Address ;
	if(Copy_u8YPos == 0u)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 23       	and	r24, r24
     ff4:	19 f4       	brne	.+6      	; 0xffc <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8XPos;
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos == 1u)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	19 f4       	brne	.+6      	; 0x1008 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = 0x40 + Copy_u8XPos;
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	80 5c       	subi	r24, 0xC0	; 192
    1006:	89 83       	std	Y+1, r24	; 0x01
	}
	// Local_u8Address = 0x40 * Copy_u8YPos + Copy_u8XPos;

	/*Set bit 7 for SetDDRAM Address command*/
	SET_BIT(Local_u8Address,7);
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	80 68       	ori	r24, 0x80	; 128
    100c:	89 83       	std	Y+1, r24	; 0x01

	/*Execute Set DDRAM Address command*/
	CLCD_voidSendCmd(Local_u8Address);
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <CLCD_u8SendSpecialCharacter>:

uint8 CLCD_u8SendSpecialCharacter(uint8 Copy_u8LocationNum, uint8* Copy_pu8Pattern, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	28 97       	sbiw	r28, 0x08	; 8
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	8c 83       	std	Y+4, r24	; 0x04
    1036:	7e 83       	std	Y+6, r23	; 0x06
    1038:	6d 83       	std	Y+5, r22	; 0x05
    103a:	4f 83       	std	Y+7, r20	; 0x07
    103c:	28 87       	std	Y+8, r18	; 0x08
	uint8 Local_u8ErrorState = OK;
    103e:	1b 82       	std	Y+3, r1	; 0x03

	if(Copy_pu8Pattern != NULL)
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	59 f1       	breq	.+86     	; 0x109e <CLCD_u8SendSpecialCharacter+0x7e>
	{
		uint8 Local_u8Counter;

		uint8 Local_u8CGRAMAddress = Copy_u8LocationNum * 8;
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	89 83       	std	Y+1, r24	; 0x01

		/*Set bit 6 for CGRAM Address command*/
		SET_BIT(Local_u8CGRAMAddress , 6u);
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	89 83       	std	Y+1, r24	; 0x01

		/*Set ACGRAM Address*/
		CLCD_voidSendCmd(Local_u8CGRAMAddress);
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

		/*Write the input pattern inside CGRAM*/
		for(Local_u8Counter=0u; Local_u8Counter<8u; Local_u8Counter++)
    1068:	1a 82       	std	Y+2, r1	; 0x02
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <CLCD_u8SendSpecialCharacter+0x68>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	fc 01       	movw	r30, r24
    1078:	e2 0f       	add	r30, r18
    107a:	f3 1f       	adc	r31, r19
    107c:	80 81       	ld	r24, Z
    107e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>

		/*Set ACGRAM Address*/
		CLCD_voidSendCmd(Local_u8CGRAMAddress);

		/*Write the input pattern inside CGRAM*/
		for(Local_u8Counter=0u; Local_u8Counter<8u; Local_u8Counter++)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	8a 83       	std	Y+2, r24	; 0x02
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	78 f3       	brcs	.-34     	; 0x106c <CLCD_u8SendSpecialCharacter+0x4c>
		{
			CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
		}

		/*Go back to DDRAM*/
		CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    108e:	8f 81       	ldd	r24, Y+7	; 0x07
    1090:	68 85       	ldd	r22, Y+8	; 0x08
    1092:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>

		/*Display the special pattern inside CGRAM*/
		CLCD_voidSendData(Copy_u8LocationNum);
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <CLCD_u8SendSpecialCharacter+0x82>

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_u8ErrorState;
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10a4:	28 96       	adiw	r28, 0x08	; 8
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <DIO_u8SetPinDirection>:
#include "DIO_prv.h"
#include "DIO_cfg.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction )
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	28 97       	sbiw	r28, 0x08	; 8
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	8a 83       	std	Y+2, r24	; 0x02
    10cc:	6b 83       	std	Y+3, r22	; 0x03
    10ce:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    10d0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 30       	cpi	r24, 0x08	; 8
    10d6:	08 f0       	brcs	.+2      	; 0x10da <DIO_u8SetPinDirection+0x24>
    10d8:	f4 c0       	rjmp	.+488    	; 0x12c2 <DIO_u8SetPinDirection+0x20c>
	{

		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	88 23       	and	r24, r24
    10de:	09 f0       	breq	.+2      	; 0x10e2 <DIO_u8SetPinDirection+0x2c>
    10e0:	77 c0       	rjmp	.+238    	; 0x11d0 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	38 87       	std	Y+8, r19	; 0x08
    10ea:	2f 83       	std	Y+7, r18	; 0x07
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	59 f1       	breq	.+86     	; 0x114c <DIO_u8SetPinDirection+0x96>
    10f6:	2f 81       	ldd	r18, Y+7	; 0x07
    10f8:	38 85       	ldd	r19, Y+8	; 0x08
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	2c f4       	brge	.+10     	; 0x110a <DIO_u8SetPinDirection+0x54>
    1100:	8f 81       	ldd	r24, Y+7	; 0x07
    1102:	98 85       	ldd	r25, Y+8	; 0x08
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f0       	breq	.+26     	; 0x1122 <DIO_u8SetPinDirection+0x6c>
    1108:	60 c0       	rjmp	.+192    	; 0x11ca <DIO_u8SetPinDirection+0x114>
    110a:	2f 81       	ldd	r18, Y+7	; 0x07
    110c:	38 85       	ldd	r19, Y+8	; 0x08
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	89 f1       	breq	.+98     	; 0x1176 <DIO_u8SetPinDirection+0xc0>
    1114:	8f 81       	ldd	r24, Y+7	; 0x07
    1116:	98 85       	ldd	r25, Y+8	; 0x08
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	91 05       	cpc	r25, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <DIO_u8SetPinDirection+0x6a>
    111e:	40 c0       	rjmp	.+128    	; 0x11a0 <DIO_u8SetPinDirection+0xea>
    1120:	54 c0       	rjmp	.+168    	; 0x11ca <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1122:	aa e3       	ldi	r26, 0x3A	; 58
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ea e3       	ldi	r30, 0x3A	; 58
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_u8SetPinDirection+0x8a>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_u8SetPinDirection+0x86>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	bd c0       	rjmp	.+378    	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    114c:	a7 e3       	ldi	r26, 0x37	; 55
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e7 e3       	ldi	r30, 0x37	; 55
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8SetPinDirection+0xb4>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_u8SetPinDirection+0xb0>
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	a8 c0       	rjmp	.+336    	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1176:	a4 e3       	ldi	r26, 0x34	; 52
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e4 e3       	ldi	r30, 0x34	; 52
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_u8SetPinDirection+0xde>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_u8SetPinDirection+0xda>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	93 c0       	rjmp	.+294    	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    11a0:	a1 e3       	ldi	r26, 0x31	; 49
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e1 e3       	ldi	r30, 0x31	; 49
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_u8SetPinDirection+0x108>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_u8SetPinDirection+0x104>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	7e c0       	rjmp	.+252    	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	7b c0       	rjmp	.+246    	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <DIO_u8SetPinDirection+0x122>
    11d6:	72 c0       	rjmp	.+228    	; 0x12bc <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	3e 83       	std	Y+6, r19	; 0x06
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	91 05       	cpc	r25, r1
    11ea:	49 f1       	breq	.+82     	; 0x123e <DIO_u8SetPinDirection+0x188>
    11ec:	2d 81       	ldd	r18, Y+5	; 0x05
    11ee:	3e 81       	ldd	r19, Y+6	; 0x06
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	2c f4       	brge	.+10     	; 0x1200 <DIO_u8SetPinDirection+0x14a>
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	61 f0       	breq	.+24     	; 0x1216 <DIO_u8SetPinDirection+0x160>
    11fe:	5b c0       	rjmp	.+182    	; 0x12b6 <DIO_u8SetPinDirection+0x200>
    1200:	2d 81       	ldd	r18, Y+5	; 0x05
    1202:	3e 81       	ldd	r19, Y+6	; 0x06
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	71 f1       	breq	.+92     	; 0x1266 <DIO_u8SetPinDirection+0x1b0>
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	91 05       	cpc	r25, r1
    1212:	e9 f1       	breq	.+122    	; 0x128e <DIO_u8SetPinDirection+0x1d8>
    1214:	50 c0       	rjmp	.+160    	; 0x12b6 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1216:	aa e3       	ldi	r26, 0x3A	; 58
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ea e3       	ldi	r30, 0x3A	; 58
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8SetPinDirection+0x17e>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8SetPinDirection+0x17a>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	44 c0       	rjmp	.+136    	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    123e:	a7 e3       	ldi	r26, 0x37	; 55
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e7 e3       	ldi	r30, 0x37	; 55
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_u8SetPinDirection+0x1a6>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_u8SetPinDirection+0x1a2>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	30 c0       	rjmp	.+96     	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1266:	a4 e3       	ldi	r26, 0x34	; 52
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e4 e3       	ldi	r30, 0x34	; 52
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_u8SetPinDirection+0x1ce>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_u8SetPinDirection+0x1ca>
    1288:	84 2b       	or	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	1c c0       	rjmp	.+56     	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    128e:	a1 e3       	ldi	r26, 0x31	; 49
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e1 e3       	ldi	r30, 0x31	; 49
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_u8SetPinDirection+0x1f6>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_u8SetPinDirection+0x1f2>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <DIO_u8SetPinDirection+0x210>
			}
		}

		else
		{
			Local_u8ErrorState = NOK;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c8:	28 96       	adiw	r28, 0x08	; 8
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value )
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	28 97       	sbiw	r28, 0x08	; 8
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	6b 83       	std	Y+3, r22	; 0x03
    12f2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    12f4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 30       	cpi	r24, 0x08	; 8
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <DIO_u8SetPinValue+0x24>
    12fc:	f4 c0       	rjmp	.+488    	; 0x14e6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	88 23       	and	r24, r24
    1302:	09 f0       	breq	.+2      	; 0x1306 <DIO_u8SetPinValue+0x2c>
    1304:	77 c0       	rjmp	.+238    	; 0x13f4 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	38 87       	std	Y+8, r19	; 0x08
    130e:	2f 83       	std	Y+7, r18	; 0x07
    1310:	8f 81       	ldd	r24, Y+7	; 0x07
    1312:	98 85       	ldd	r25, Y+8	; 0x08
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	91 05       	cpc	r25, r1
    1318:	59 f1       	breq	.+86     	; 0x1370 <DIO_u8SetPinValue+0x96>
    131a:	2f 81       	ldd	r18, Y+7	; 0x07
    131c:	38 85       	ldd	r19, Y+8	; 0x08
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	2c f4       	brge	.+10     	; 0x132e <DIO_u8SetPinValue+0x54>
    1324:	8f 81       	ldd	r24, Y+7	; 0x07
    1326:	98 85       	ldd	r25, Y+8	; 0x08
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	69 f0       	breq	.+26     	; 0x1346 <DIO_u8SetPinValue+0x6c>
    132c:	60 c0       	rjmp	.+192    	; 0x13ee <DIO_u8SetPinValue+0x114>
    132e:	2f 81       	ldd	r18, Y+7	; 0x07
    1330:	38 85       	ldd	r19, Y+8	; 0x08
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	89 f1       	breq	.+98     	; 0x139a <DIO_u8SetPinValue+0xc0>
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	83 30       	cpi	r24, 0x03	; 3
    133e:	91 05       	cpc	r25, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <DIO_u8SetPinValue+0x6a>
    1342:	40 c0       	rjmp	.+128    	; 0x13c4 <DIO_u8SetPinValue+0xea>
    1344:	54 c0       	rjmp	.+168    	; 0x13ee <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1346:	ab e3       	ldi	r26, 0x3B	; 59
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	eb e3       	ldi	r30, 0x3B	; 59
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_u8SetPinValue+0x8a>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_u8SetPinValue+0x86>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	bd c0       	rjmp	.+378    	; 0x14ea <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_u8SetPinValue+0xb4>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_u8SetPinValue+0xb0>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	a8 c0       	rjmp	.+336    	; 0x14ea <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    139a:	a5 e3       	ldi	r26, 0x35	; 53
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e3       	ldi	r30, 0x35	; 53
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_u8SetPinValue+0xde>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_u8SetPinValue+0xda>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	93 c0       	rjmp	.+294    	; 0x14ea <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    13c4:	a2 e3       	ldi	r26, 0x32	; 50
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e2 e3       	ldi	r30, 0x32	; 50
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_u8SetPinValue+0x108>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_u8SetPinValue+0x104>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	7e c0       	rjmp	.+252    	; 0x14ea <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	7b c0       	rjmp	.+246    	; 0x14ea <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	09 f0       	breq	.+2      	; 0x13fc <DIO_u8SetPinValue+0x122>
    13fa:	72 c0       	rjmp	.+228    	; 0x14e0 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	3e 83       	std	Y+6, r19	; 0x06
    1404:	2d 83       	std	Y+5, r18	; 0x05
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	91 05       	cpc	r25, r1
    140e:	49 f1       	breq	.+82     	; 0x1462 <DIO_u8SetPinValue+0x188>
    1410:	2d 81       	ldd	r18, Y+5	; 0x05
    1412:	3e 81       	ldd	r19, Y+6	; 0x06
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	2c f4       	brge	.+10     	; 0x1424 <DIO_u8SetPinValue+0x14a>
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	61 f0       	breq	.+24     	; 0x143a <DIO_u8SetPinValue+0x160>
    1422:	5b c0       	rjmp	.+182    	; 0x14da <DIO_u8SetPinValue+0x200>
    1424:	2d 81       	ldd	r18, Y+5	; 0x05
    1426:	3e 81       	ldd	r19, Y+6	; 0x06
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	71 f1       	breq	.+92     	; 0x148a <DIO_u8SetPinValue+0x1b0>
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	91 05       	cpc	r25, r1
    1436:	e9 f1       	breq	.+122    	; 0x14b2 <DIO_u8SetPinValue+0x1d8>
    1438:	50 c0       	rjmp	.+160    	; 0x14da <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    143a:	ab e3       	ldi	r26, 0x3B	; 59
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8SetPinValue+0x17e>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_u8SetPinValue+0x17a>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	44 c0       	rjmp	.+136    	; 0x14ea <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1462:	a8 e3       	ldi	r26, 0x38	; 56
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e8 e3       	ldi	r30, 0x38	; 56
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_u8SetPinValue+0x1a6>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_u8SetPinValue+0x1a2>
    1484:	84 2b       	or	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	30 c0       	rjmp	.+96     	; 0x14ea <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    148a:	a5 e3       	ldi	r26, 0x35	; 53
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8SetPinValue+0x1ce>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8SetPinValue+0x1ca>
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	1c c0       	rjmp	.+56     	; 0x14ea <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    14b2:	a2 e3       	ldi	r26, 0x32	; 50
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_u8SetPinValue+0x1f6>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_u8SetPinValue+0x1f2>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	28 96       	adiw	r28, 0x08	; 8
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	27 97       	sbiw	r28, 0x07	; 7
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	8a 83       	std	Y+2, r24	; 0x02
    1514:	6b 83       	std	Y+3, r22	; 0x03
    1516:	5d 83       	std	Y+5, r21	; 0x05
    1518:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    151a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL)
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	09 f4       	brne	.+2      	; 0x1526 <DIO_u8ReadPinValue+0x28>
    1524:	7b c0       	rjmp	.+246    	; 0x161c <DIO_u8ReadPinValue+0x11e>
	{
		if(Copy_u8Pin <=DIO_u8PIN7)
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	08 f0       	brcs	.+2      	; 0x152e <DIO_u8ReadPinValue+0x30>
    152c:	74 c0       	rjmp	.+232    	; 0x1616 <DIO_u8ReadPinValue+0x118>
		{
			switch(Copy_u8Port)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3f 83       	std	Y+7, r19	; 0x07
    1536:	2e 83       	std	Y+6, r18	; 0x06
    1538:	4e 81       	ldd	r20, Y+6	; 0x06
    153a:	5f 81       	ldd	r21, Y+7	; 0x07
    153c:	41 30       	cpi	r20, 0x01	; 1
    153e:	51 05       	cpc	r21, r1
    1540:	59 f1       	breq	.+86     	; 0x1598 <DIO_u8ReadPinValue+0x9a>
    1542:	8e 81       	ldd	r24, Y+6	; 0x06
    1544:	9f 81       	ldd	r25, Y+7	; 0x07
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	91 05       	cpc	r25, r1
    154a:	34 f4       	brge	.+12     	; 0x1558 <DIO_u8ReadPinValue+0x5a>
    154c:	2e 81       	ldd	r18, Y+6	; 0x06
    154e:	3f 81       	ldd	r19, Y+7	; 0x07
    1550:	21 15       	cp	r18, r1
    1552:	31 05       	cpc	r19, r1
    1554:	69 f0       	breq	.+26     	; 0x1570 <DIO_u8ReadPinValue+0x72>
    1556:	5c c0       	rjmp	.+184    	; 0x1610 <DIO_u8ReadPinValue+0x112>
    1558:	4e 81       	ldd	r20, Y+6	; 0x06
    155a:	5f 81       	ldd	r21, Y+7	; 0x07
    155c:	42 30       	cpi	r20, 0x02	; 2
    155e:	51 05       	cpc	r21, r1
    1560:	79 f1       	breq	.+94     	; 0x15c0 <DIO_u8ReadPinValue+0xc2>
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	9f 81       	ldd	r25, Y+7	; 0x07
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <DIO_u8ReadPinValue+0x70>
    156c:	3d c0       	rjmp	.+122    	; 0x15e8 <DIO_u8ReadPinValue+0xea>
    156e:	50 c0       	rjmp	.+160    	; 0x1610 <DIO_u8ReadPinValue+0x112>
			{
			case DIO_u8PORTA :*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1570:	e9 e3       	ldi	r30, 0x39	; 57
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a9 01       	movw	r20, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_u8ReadPinValue+0x8a>
    1584:	55 95       	asr	r21
    1586:	47 95       	ror	r20
    1588:	8a 95       	dec	r24
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_u8ReadPinValue+0x86>
    158c:	ca 01       	movw	r24, r20
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	ec 81       	ldd	r30, Y+4	; 0x04
    1592:	fd 81       	ldd	r31, Y+5	; 0x05
    1594:	80 83       	st	Z, r24
    1596:	44 c0       	rjmp	.+136    	; 0x1620 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB :*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1598:	e6 e3       	ldi	r30, 0x36	; 54
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_u8ReadPinValue+0xb2>
    15ac:	55 95       	asr	r21
    15ae:	47 95       	ror	r20
    15b0:	8a 95       	dec	r24
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_u8ReadPinValue+0xae>
    15b4:	ca 01       	movw	r24, r20
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	ec 81       	ldd	r30, Y+4	; 0x04
    15ba:	fd 81       	ldd	r31, Y+5	; 0x05
    15bc:	80 83       	st	Z, r24
    15be:	30 c0       	rjmp	.+96     	; 0x1620 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC :*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    15c0:	e3 e3       	ldi	r30, 0x33	; 51
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a9 01       	movw	r20, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_u8ReadPinValue+0xda>
    15d4:	55 95       	asr	r21
    15d6:	47 95       	ror	r20
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_u8ReadPinValue+0xd6>
    15dc:	ca 01       	movw	r24, r20
    15de:	81 70       	andi	r24, 0x01	; 1
    15e0:	ec 81       	ldd	r30, Y+4	; 0x04
    15e2:	fd 81       	ldd	r31, Y+5	; 0x05
    15e4:	80 83       	st	Z, r24
    15e6:	1c c0       	rjmp	.+56     	; 0x1620 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD :*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    15e8:	e0 e3       	ldi	r30, 0x30	; 48
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a9 01       	movw	r20, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_u8ReadPinValue+0x102>
    15fc:	55 95       	asr	r21
    15fe:	47 95       	ror	r20
    1600:	8a 95       	dec	r24
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_u8ReadPinValue+0xfe>
    1604:	ca 01       	movw	r24, r20
    1606:	81 70       	andi	r24, 0x01	; 1
    1608:	ec 81       	ldd	r30, Y+4	; 0x04
    160a:	fd 81       	ldd	r31, Y+5	; 0x05
    160c:	80 83       	st	Z, r24
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <DIO_u8ReadPinValue+0x122>
			default : Local_u8ErrorState = NOK; 		 break;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <DIO_u8ReadPinValue+0x122>
			}
		}
		else
		{
			/*Pin number is invalid*/
			Local_u8ErrorState = NOK;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_u8ReadPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	27 96       	adiw	r28, 0x07	; 7
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <DIO_u8SetPortDirection>:


uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_u8SetPortDirection+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_u8SetPortDirection+0x8>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	8a 83       	std	Y+2, r24	; 0x02
    1644:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1646:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3d 83       	std	Y+5, r19	; 0x05
    1650:	2c 83       	std	Y+4, r18	; 0x04
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	d1 f0       	breq	.+52     	; 0x1690 <DIO_u8SetPortDirection+0x5c>
    165c:	2c 81       	ldd	r18, Y+4	; 0x04
    165e:	3d 81       	ldd	r19, Y+5	; 0x05
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	2c f4       	brge	.+10     	; 0x1670 <DIO_u8SetPortDirection+0x3c>
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	61 f0       	breq	.+24     	; 0x1686 <DIO_u8SetPortDirection+0x52>
    166e:	1f c0       	rjmp	.+62     	; 0x16ae <DIO_u8SetPortDirection+0x7a>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	81 f0       	breq	.+32     	; 0x169a <DIO_u8SetPortDirection+0x66>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	83 30       	cpi	r24, 0x03	; 3
    1680:	91 05       	cpc	r25, r1
    1682:	81 f0       	breq	.+32     	; 0x16a4 <DIO_u8SetPortDirection+0x70>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    1686:	ea e3       	ldi	r30, 0x3A	; 58
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	80 83       	st	Z, r24
    168e:	11 c0       	rjmp	.+34     	; 0x16b2 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1690:	e7 e3       	ldi	r30, 0x37	; 55
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	80 83       	st	Z, r24
    1698:	0c c0       	rjmp	.+24     	; 0x16b2 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    169a:	e4 e3       	ldi	r30, 0x34	; 52
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	80 83       	st	Z, r24
    16a2:	07 c0       	rjmp	.+14     	; 0x16b2 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    16a4:	e1 e3       	ldi	r30, 0x31	; 49
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	80 83       	st	Z, r24
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value )
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_u8SetPortValue+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <DIO_u8SetPortValue+0x8>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    16d6:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3d 83       	std	Y+5, r19	; 0x05
    16e0:	2c 83       	std	Y+4, r18	; 0x04
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	d1 f0       	breq	.+52     	; 0x1720 <DIO_u8SetPortValue+0x5c>
    16ec:	2c 81       	ldd	r18, Y+4	; 0x04
    16ee:	3d 81       	ldd	r19, Y+5	; 0x05
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_u8SetPortValue+0x3c>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_u8SetPortValue+0x52>
    16fe:	1f c0       	rjmp	.+62     	; 0x173e <DIO_u8SetPortValue+0x7a>
    1700:	2c 81       	ldd	r18, Y+4	; 0x04
    1702:	3d 81       	ldd	r19, Y+5	; 0x05
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <DIO_u8SetPortValue+0x66>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	81 f0       	breq	.+32     	; 0x1734 <DIO_u8SetPortValue+0x70>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1716:	eb e3       	ldi	r30, 0x3B	; 59
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	80 83       	st	Z, r24
    171e:	11 c0       	rjmp	.+34     	; 0x1742 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	80 83       	st	Z, r24
    1728:	0c c0       	rjmp	.+24     	; 0x1742 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    172a:	e5 e3       	ldi	r30, 0x35	; 53
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	80 83       	st	Z, r24
    1732:	07 c0       	rjmp	.+14     	; 0x1742 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1734:	e2 e3       	ldi	r30, 0x32	; 50
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	80 83       	st	Z, r24
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK; 	 break;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <DIO_u8TogglePinValue+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <DIO_u8TogglePinValue+0x8>
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	8a 83       	std	Y+2, r24	; 0x02
    1764:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1766:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	88 30       	cpi	r24, 0x08	; 8
    176c:	08 f0       	brcs	.+2      	; 0x1770 <DIO_u8TogglePinValue+0x1c>
    176e:	72 c0       	rjmp	.+228    	; 0x1854 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3d 83       	std	Y+5, r19	; 0x05
    1778:	2c 83       	std	Y+4, r18	; 0x04
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	91 05       	cpc	r25, r1
    1782:	49 f1       	breq	.+82     	; 0x17d6 <DIO_u8TogglePinValue+0x82>
    1784:	2c 81       	ldd	r18, Y+4	; 0x04
    1786:	3d 81       	ldd	r19, Y+5	; 0x05
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	2c f4       	brge	.+10     	; 0x1798 <DIO_u8TogglePinValue+0x44>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	61 f0       	breq	.+24     	; 0x17ae <DIO_u8TogglePinValue+0x5a>
    1796:	5b c0       	rjmp	.+182    	; 0x184e <DIO_u8TogglePinValue+0xfa>
    1798:	2c 81       	ldd	r18, Y+4	; 0x04
    179a:	3d 81       	ldd	r19, Y+5	; 0x05
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	71 f1       	breq	.+92     	; 0x17fe <DIO_u8TogglePinValue+0xaa>
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	83 30       	cpi	r24, 0x03	; 3
    17a8:	91 05       	cpc	r25, r1
    17aa:	e9 f1       	breq	.+122    	; 0x1826 <DIO_u8TogglePinValue+0xd2>
    17ac:	50 c0       	rjmp	.+160    	; 0x184e <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
    17ae:	ab e3       	ldi	r26, 0x3B	; 59
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	eb e3       	ldi	r30, 0x3B	; 59
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_u8TogglePinValue+0x78>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <DIO_u8TogglePinValue+0x74>
    17d0:	84 27       	eor	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	41 c0       	rjmp	.+130    	; 0x1858 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
    17d6:	a8 e3       	ldi	r26, 0x38	; 56
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e8 e3       	ldi	r30, 0x38	; 56
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_u8TogglePinValue+0xa0>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <DIO_u8TogglePinValue+0x9c>
    17f8:	84 27       	eor	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	2d c0       	rjmp	.+90     	; 0x1858 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_u8TogglePinValue+0xc8>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_u8TogglePinValue+0xc4>
    1820:	84 27       	eor	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	19 c0       	rjmp	.+50     	; 0x1858 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    1826:	a2 e3       	ldi	r26, 0x32	; 50
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e2 e3       	ldi	r30, 0x32	; 50
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_u8TogglePinValue+0xf0>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_u8TogglePinValue+0xec>
    1848:	84 27       	eor	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <DIO_u8TogglePinValue+0x104>
		default : Local_u8ErrorState = NOK; 		 break;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <KPD_u8GetPressedKey>:
#include "KPD_cfg.h"
#include "KPD_interface.h"


uint8 KPD_u8GetPressedKey(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	a2 97       	sbiw	r28, 0x22	; 34
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8ColIdx , Local_u8RowIdx, Local_u8PinState,Local_u8PressedKey = KPD_u8NOPERESSED_KEY_VAL;
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8RowArr[ROW_NUM]={KPD_u8ROW0_PIN,KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN};
    1882:	84 e0       	ldi	r24, 0x04	; 4
    1884:	8d 83       	std	Y+5, r24	; 0x05
    1886:	85 e0       	ldi	r24, 0x05	; 5
    1888:	8e 83       	std	Y+6, r24	; 0x06
    188a:	86 e0       	ldi	r24, 0x06	; 6
    188c:	8f 83       	std	Y+7, r24	; 0x07
    188e:	87 e0       	ldi	r24, 0x07	; 7
    1890:	88 87       	std	Y+8, r24	; 0x08

	uint8 Local_u8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	89 87       	std	Y+9, r24	; 0x09
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	8a 87       	std	Y+10, r24	; 0x0a
    189a:	84 e0       	ldi	r24, 0x04	; 4
    189c:	8b 87       	std	Y+11, r24	; 0x0b
    189e:	85 e0       	ldi	r24, 0x05	; 5
    18a0:	8c 87       	std	Y+12, r24	; 0x0c

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;
    18a2:	ce 01       	movw	r24, r28
    18a4:	0d 96       	adiw	r24, 0x0d	; 13
    18a6:	9f 8f       	std	Y+31, r25	; 0x1f
    18a8:	8e 8f       	std	Y+30, r24	; 0x1e
    18aa:	e0 ec       	ldi	r30, 0xC0	; 192
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	f9 a3       	std	Y+33, r31	; 0x21
    18b0:	e8 a3       	std	Y+32, r30	; 0x20
    18b2:	f0 e1       	ldi	r31, 0x10	; 16
    18b4:	fa a3       	std	Y+34, r31	; 0x22
    18b6:	e8 a1       	ldd	r30, Y+32	; 0x20
    18b8:	f9 a1       	ldd	r31, Y+33	; 0x21
    18ba:	00 80       	ld	r0, Z
    18bc:	88 a1       	ldd	r24, Y+32	; 0x20
    18be:	99 a1       	ldd	r25, Y+33	; 0x21
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	99 a3       	std	Y+33, r25	; 0x21
    18c4:	88 a3       	std	Y+32, r24	; 0x20
    18c6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    18c8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    18ca:	00 82       	st	Z, r0
    18cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	9f 8f       	std	Y+31, r25	; 0x1f
    18d4:	8e 8f       	std	Y+30, r24	; 0x1e
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	91 50       	subi	r25, 0x01	; 1
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	ea a1       	ldd	r30, Y+34	; 0x22
    18de:	ee 23       	and	r30, r30
    18e0:	51 f7       	brne	.-44     	; 0x18b6 <KPD_u8GetPressedKey+0x4c>

	//Activate the column pins
	for(Local_u8ColIdx = 0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++ )
    18e2:	1b 82       	std	Y+3, r1	; 0x03
    18e4:	68 c0       	rjmp	.+208    	; 0x19b6 <KPD_u8GetPressedKey+0x14c>
	{
		//Activate the current column
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColIdx] , DIO_u8PIN_LOW);
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	ce 01       	movw	r24, r28
    18ee:	09 96       	adiw	r24, 0x09	; 9
    18f0:	fc 01       	movw	r30, r24
    18f2:	e2 0f       	add	r30, r18
    18f4:	f3 1f       	adc	r31, r19
    18f6:	90 81       	ld	r25, Z
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	69 2f       	mov	r22, r25
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>

		//Read the row pins
		for(Local_u8RowIdx = 0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++ )
    1902:	1a 82       	std	Y+2, r1	; 0x02
    1904:	43 c0       	rjmp	.+134    	; 0x198c <KPD_u8GetPressedKey+0x122>
		{
			//Read the current row
			DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	ce 01       	movw	r24, r28
    190e:	05 96       	adiw	r24, 0x05	; 5
    1910:	fc 01       	movw	r30, r24
    1912:	e2 0f       	add	r30, r18
    1914:	f3 1f       	adc	r31, r19
    1916:	90 81       	ld	r25, Z
    1918:	9e 01       	movw	r18, r28
    191a:	2c 5f       	subi	r18, 0xFC	; 252
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	69 2f       	mov	r22, r25
    1922:	a9 01       	movw	r20, r18
    1924:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_u8ReadPinValue>

			if(Local_u8PinState == DIO_u8PIN_LOW)
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	88 23       	and	r24, r24
    192c:	61 f5       	brne	.+88     	; 0x1986 <KPD_u8GetPressedKey+0x11c>
			{
				Local_u8PressedKey = Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	48 2f       	mov	r20, r24
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	22 0f       	add	r18, r18
    1940:	33 1f       	adc	r19, r19
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	84 0f       	add	r24, r20
    194c:	95 1f       	adc	r25, r21
    194e:	fc 01       	movw	r30, r24
    1950:	3c 96       	adiw	r30, 0x0c	; 12
    1952:	80 81       	ld	r24, Z
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	11 c0       	rjmp	.+34     	; 0x197a <KPD_u8GetPressedKey+0x110>

				//polling with blocking( waiting ) until the key is released
				while(Local_u8PinState == DIO_u8PIN_LOW)
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	ce 01       	movw	r24, r28
    1960:	05 96       	adiw	r24, 0x05	; 5
    1962:	fc 01       	movw	r30, r24
    1964:	e2 0f       	add	r30, r18
    1966:	f3 1f       	adc	r31, r19
    1968:	90 81       	ld	r25, Z
    196a:	9e 01       	movw	r18, r28
    196c:	2c 5f       	subi	r18, 0xFC	; 252
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	69 2f       	mov	r22, r25
    1974:	a9 01       	movw	r20, r18
    1976:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_u8ReadPinValue>
			if(Local_u8PinState == DIO_u8PIN_LOW)
			{
				Local_u8PressedKey = Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];

				//polling with blocking( waiting ) until the key is released
				while(Local_u8PinState == DIO_u8PIN_LOW)
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	88 23       	and	r24, r24
    197e:	61 f3       	breq	.-40     	; 0x1958 <KPD_u8GetPressedKey+0xee>
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT , Local_u8RowArr[Local_u8RowIdx] , &Local_u8PinState);

				}
				return Local_u8PressedKey;
    1980:	f9 81       	ldd	r31, Y+1	; 0x01
    1982:	fd 8f       	std	Y+29, r31	; 0x1d
    1984:	1e c0       	rjmp	.+60     	; 0x19c2 <KPD_u8GetPressedKey+0x158>
	{
		//Activate the current column
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColIdx] , DIO_u8PIN_LOW);

		//Read the row pins
		for(Local_u8RowIdx = 0u ; Local_u8RowIdx < ROW_NUM ; Local_u8RowIdx++ )
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	08 f4       	brcc	.+2      	; 0x1994 <KPD_u8GetPressedKey+0x12a>
    1992:	b9 cf       	rjmp	.-142    	; 0x1906 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;

			}
		}

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	ce 01       	movw	r24, r28
    199c:	09 96       	adiw	r24, 0x09	; 9
    199e:	fc 01       	movw	r30, r24
    19a0:	e2 0f       	add	r30, r18
    19a2:	f3 1f       	adc	r31, r19
    19a4:	90 81       	ld	r25, Z
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	69 2f       	mov	r22, r25
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 6d 09 	call	0x12da	; 0x12da <DIO_u8SetPinValue>
	uint8 Local_u8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;

	//Activate the column pins
	for(Local_u8ColIdx = 0u ; Local_u8ColIdx < COL_NUM ; Local_u8ColIdx++ )
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	8b 83       	std	Y+3, r24	; 0x03
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	08 f4       	brcc	.+2      	; 0x19be <KPD_u8GetPressedKey+0x154>
    19bc:	94 cf       	rjmp	.-216    	; 0x18e6 <KPD_u8GetPressedKey+0x7c>
		}

		DIO_u8SetPinValue(KPD_u8COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);

	}
	return Local_u8PressedKey;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	8d 8f       	std	Y+29, r24	; 0x1d
    19c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    19c4:	a2 96       	adiw	r28, 0x22	; 34
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    19e6:	e7 e3       	ldi	r30, 0x37	; 55
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    19ec:	e4 e3       	ldi	r30, 0x34	; 52
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    19f2:	e1 e3       	ldi	r30, 0x31	; 49
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8c e3       	ldi	r24, 0x3C	; 60
    19f8:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    19fa:	eb e3       	ldi	r30, 0x3B	; 59
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 ef       	ldi	r24, 0xF0	; 240
    1a06:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    1a08:	e5 e3       	ldi	r30, 0x35	; 53
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VAL;
    1a10:	e2 e3       	ldi	r30, 0x32	; 50
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	8c e3       	ldi	r24, 0x3C	; 60
    1a16:	80 83       	st	Z, r24
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <scan>:

uint8 u8arrClk[3];
uint8 hour = 0 , seconds = 0 , minutes = 0;

void scan(uint8 arr[])
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <scan+0x6>
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
	u8arrClk[0]=((arr[0])*10)+(arr[1]);
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a30:	80 81       	ld	r24, Z
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9c 01       	movw	r18, r24
    1a38:	22 0f       	add	r18, r18
    1a3a:	33 1f       	adc	r19, r19
    1a3c:	c9 01       	movw	r24, r18
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	82 0f       	add	r24, r18
    1a48:	93 1f       	adc	r25, r19
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	fc 01       	movw	r30, r24
    1a52:	31 96       	adiw	r30, 0x01	; 1
    1a54:	80 81       	ld	r24, Z
    1a56:	82 0f       	add	r24, r18
    1a58:	80 93 e3 00 	sts	0x00E3, r24
	u8arrClk[1]=((arr[3])*10)+(arr[4]);
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	fc 01       	movw	r30, r24
    1a62:	33 96       	adiw	r30, 0x03	; 3
    1a64:	80 81       	ld	r24, Z
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9c 01       	movw	r18, r24
    1a6c:	22 0f       	add	r18, r18
    1a6e:	33 1f       	adc	r19, r19
    1a70:	c9 01       	movw	r24, r18
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	28 2f       	mov	r18, r24
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	fc 01       	movw	r30, r24
    1a86:	34 96       	adiw	r30, 0x04	; 4
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 0f       	add	r24, r18
    1a8c:	80 93 e4 00 	sts	0x00E4, r24
	u8arrClk[2]=((arr[6])*10)+(arr[7]);
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	fc 01       	movw	r30, r24
    1a96:	36 96       	adiw	r30, 0x06	; 6
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9c 01       	movw	r18, r24
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	c9 01       	movw	r24, r18
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	82 0f       	add	r24, r18
    1ab0:	93 1f       	adc	r25, r19
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	fc 01       	movw	r30, r24
    1aba:	37 96       	adiw	r30, 0x07	; 7
    1abc:	80 81       	ld	r24, Z
    1abe:	82 0f       	add	r24, r18
    1ac0:	80 93 e5 00 	sts	0x00E5, r24
	hour=u8arrClk[0];
    1ac4:	80 91 e3 00 	lds	r24, 0x00E3
    1ac8:	80 93 e0 00 	sts	0x00E0, r24
	minutes=u8arrClk[1];
    1acc:	80 91 e4 00 	lds	r24, 0x00E4
    1ad0:	80 93 e2 00 	sts	0x00E2, r24
	seconds=u8arrClk[2];
    1ad4:	80 91 e5 00 	lds	r24, 0x00E5
    1ad8:	80 93 e1 00 	sts	0x00E1, r24


}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <startStopWatch>:


void startStopWatch(void)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	61 97       	sbiw	r28, 0x11	; 17
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
	uint8_t currentHour = hour;
    1afa:	80 91 e0 00 	lds	r24, 0x00E0
    1afe:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t currentMinute = minutes;
    1b00:	80 91 e2 00 	lds	r24, 0x00E2
    1b04:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t currentSecond = seconds;
    1b06:	80 91 e1 00 	lds	r24, 0x00E1
    1b0a:	8f 87       	std	Y+15, r24	; 0x0f
    1b0c:	fd c0       	rjmp	.+506    	; 0x1d08 <startStopWatch+0x222>

	while (currentHour > 0 || currentMinute > 0 || currentSecond > 0)
	{
		if (currentSecond == 0)
    1b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b10:	88 23       	and	r24, r24
    1b12:	41 f4       	brne	.+16     	; 0x1b24 <startStopWatch+0x3e>
		{
			currentSecond = 59;
    1b14:	8b e3       	ldi	r24, 0x3B	; 59
    1b16:	8f 87       	std	Y+15, r24	; 0x0f
			if(currentMinute >0)
    1b18:	88 89       	ldd	r24, Y+16	; 0x10
    1b1a:	88 23       	and	r24, r24
    1b1c:	19 f0       	breq	.+6      	; 0x1b24 <startStopWatch+0x3e>
			{
				currentMinute--;
    1b1e:	88 89       	ldd	r24, Y+16	; 0x10
    1b20:	81 50       	subi	r24, 0x01	; 1
    1b22:	88 8b       	std	Y+16, r24	; 0x10
			}
		}

		if ((currentMinute == 0)&&(currentHour>0))
    1b24:	88 89       	ldd	r24, Y+16	; 0x10
    1b26:	88 23       	and	r24, r24
    1b28:	59 f4       	brne	.+22     	; 0x1b40 <startStopWatch+0x5a>
    1b2a:	89 89       	ldd	r24, Y+17	; 0x11
    1b2c:	88 23       	and	r24, r24
    1b2e:	41 f0       	breq	.+16     	; 0x1b40 <startStopWatch+0x5a>
		{
			currentMinute = 59;
    1b30:	8b e3       	ldi	r24, 0x3B	; 59
    1b32:	88 8b       	std	Y+16, r24	; 0x10
			if(currentHour>0)
    1b34:	89 89       	ldd	r24, Y+17	; 0x11
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <startStopWatch+0x5a>
			{
				currentHour--;
    1b3a:	89 89       	ldd	r24, Y+17	; 0x11
    1b3c:	81 50       	subi	r24, 0x01	; 1
    1b3e:	89 8b       	std	Y+17, r24	; 0x11
			}
		}

		if (currentHour <= 9)
    1b40:	89 89       	ldd	r24, Y+17	; 0x11
    1b42:	8a 30       	cpi	r24, 0x0A	; 10
    1b44:	a8 f4       	brcc	.+42     	; 0x1b70 <startStopWatch+0x8a>
		{
			CLCD_voidGoToXY(0, 0);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendData('0');
    1b4e:	80 e3       	ldi	r24, 0x30	; 48
    1b50:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			CLCD_voidGoToXY(1, 0);
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(currentHour);
    1b5c:	89 89       	ldd	r24, Y+17	; 0x11
    1b5e:	88 2f       	mov	r24, r24
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e0       	ldi	r26, 0x00	; 0
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
    1b6e:	0d c0       	rjmp	.+26     	; 0x1b8a <startStopWatch+0xa4>
		}
		else
		{
			CLCD_voidGoToXY(0, 0);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(currentHour);
    1b78:	89 89       	ldd	r24, Y+17	; 0x11
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
		}

		if (currentMinute <= 9)
    1b8a:	88 89       	ldd	r24, Y+16	; 0x10
    1b8c:	8a 30       	cpi	r24, 0x0A	; 10
    1b8e:	a8 f4       	brcc	.+42     	; 0x1bba <startStopWatch+0xd4>
		{

			CLCD_voidGoToXY(3, 0);
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendData('0');
    1b98:	80 e3       	ldi	r24, 0x30	; 48
    1b9a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			CLCD_voidGoToXY(4, 0);
    1b9e:	84 e0       	ldi	r24, 0x04	; 4
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(currentMinute);
    1ba6:	88 89       	ldd	r24, Y+16	; 0x10
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
    1bb8:	0d c0       	rjmp	.+26     	; 0x1bd4 <startStopWatch+0xee>
		}
		else
		{
			CLCD_voidGoToXY(3, 0);
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(currentMinute);
    1bc2:	88 89       	ldd	r24, Y+16	; 0x10
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
		}

		if (currentSecond <= 9)
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	8a 30       	cpi	r24, 0x0A	; 10
    1bd8:	a8 f4       	brcc	.+42     	; 0x1c04 <startStopWatch+0x11e>
		{
			CLCD_voidGoToXY(6, 0);
    1bda:	86 e0       	ldi	r24, 0x06	; 6
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendData('0');
    1be2:	80 e3       	ldi	r24, 0x30	; 48
    1be4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
			CLCD_voidGoToXY(7, 0);
    1be8:	87 e0       	ldi	r24, 0x07	; 7
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(currentSecond);
    1bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e0       	ldi	r26, 0x00	; 0
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <startStopWatch+0x138>
		}
		else
		{
			CLCD_voidGoToXY(6, 0);
    1c04:	86 e0       	ldi	r24, 0x06	; 6
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
			CLCD_voidSendNumber(currentSecond);
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e0       	ldi	r26, 0x00	; 0
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
		}

		currentSecond--;
    1c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c20:	81 50       	subi	r24, 0x01	; 1
    1c22:	8f 87       	std	Y+15, r24	; 0x0f
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	aa ef       	ldi	r26, 0xFA	; 250
    1c2a:	b3 e4       	ldi	r27, 0x43	; 67
    1c2c:	8b 87       	std	Y+11, r24	; 0x0b
    1c2e:	9c 87       	std	Y+12, r25	; 0x0c
    1c30:	ad 87       	std	Y+13, r26	; 0x0d
    1c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	55 e4       	ldi	r21, 0x45	; 69
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8f 83       	std	Y+7, r24	; 0x07
    1c4e:	98 87       	std	Y+8, r25	; 0x08
    1c50:	a9 87       	std	Y+9, r26	; 0x09
    1c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c54:	6f 81       	ldd	r22, Y+7	; 0x07
    1c56:	78 85       	ldd	r23, Y+8	; 0x08
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <startStopWatch+0x190>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <startStopWatch+0x20e>
	else if (__tmp > 65535)
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <startStopWatch+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <startStopWatch+0x1f0>
    1cb8:	80 e9       	ldi	r24, 0x90	; 144
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <startStopWatch+0x1de>
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <startStopWatch+0x1d2>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <startStopWatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <startStopWatch+0x21a>
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t currentHour = hour;
	uint8_t currentMinute = minutes;
	uint8_t currentSecond = seconds;

	while (currentHour > 0 || currentMinute > 0 || currentSecond > 0)
    1d08:	89 89       	ldd	r24, Y+17	; 0x11
    1d0a:	88 23       	and	r24, r24
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <startStopWatch+0x22a>
    1d0e:	ff ce       	rjmp	.-514    	; 0x1b0e <startStopWatch+0x28>
    1d10:	88 89       	ldd	r24, Y+16	; 0x10
    1d12:	88 23       	and	r24, r24
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <startStopWatch+0x232>
    1d16:	fb ce       	rjmp	.-522    	; 0x1b0e <startStopWatch+0x28>
    1d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1a:	88 23       	and	r24, r24
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <startStopWatch+0x23a>
    1d1e:	f7 ce       	rjmp	.-530    	; 0x1b0e <startStopWatch+0x28>
		}

		currentSecond--;
		_delay_ms(500);
	}
}
    1d20:	61 96       	adiw	r28, 0x11	; 17
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <hamoksha>:
		0b00011111,0
};



void hamoksha(void){
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	2f 97       	sbiw	r28, 0x0f	; 15
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61



	CLCD_voidSendCmd(1);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
	CLCD_voidGoToXY(0,0);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
	CLCD_u8SendString("stopWatchIsOver");
    1d54:	80 e6       	ldi	r24, 0x60	; 96
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
	for(uint8 i=0;i<16;i++)
    1d5c:	1f 86       	std	Y+15, r1	; 0x0f
    1d5e:	a0 c0       	rjmp	.+320    	; 0x1ea0 <hamoksha+0x16e>
	{
		i++;
    1d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	8f 87       	std	Y+15, r24	; 0x0f
		CLCD_voidGoToXY(0,8);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	68 e0       	ldi	r22, 0x08	; 8
    1d6a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
		CLCD_u8SendString("stopWatchIsOver");
    1d6e:	80 e6       	ldi	r24, 0x60	; 96
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
		CLCD_u8SendSpecialCharacter(0,Local_u8Hamoksha,5,1);
    1d76:	28 e7       	ldi	r18, 0x78	; 120
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	b9 01       	movw	r22, r18
    1d7e:	45 e0       	ldi	r20, 0x05	; 5
    1d80:	21 e0       	ldi	r18, 0x01	; 1
    1d82:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_u8SendSpecialCharacter>
		CLCD_u8SendSpecialCharacter(0,Local_u8HamokshaDANCE1,5,1);
    1d86:	2a e8       	ldi	r18, 0x8A	; 138
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	45 e0       	ldi	r20, 0x05	; 5
    1d90:	21 e0       	ldi	r18, 0x01	; 1
    1d92:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_u8SendSpecialCharacter>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a8 e4       	ldi	r26, 0x48	; 72
    1d9c:	b3 e4       	ldi	r27, 0x43	; 67
    1d9e:	8b 87       	std	Y+11, r24	; 0x0b
    1da0:	9c 87       	std	Y+12, r25	; 0x0c
    1da2:	ad 87       	std	Y+13, r26	; 0x0d
    1da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a e7       	ldi	r20, 0x7A	; 122
    1db4:	55 e4       	ldi	r21, 0x45	; 69
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	8f 83       	std	Y+7, r24	; 0x07
    1dc0:	98 87       	std	Y+8, r25	; 0x08
    1dc2:	a9 87       	std	Y+9, r26	; 0x09
    1dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc8:	78 85       	ldd	r23, Y+8	; 0x08
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <hamoksha+0xb6>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <hamoksha+0x134>
	else if (__tmp > 65535)
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <hamoksha+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e2       	ldi	r20, 0x20	; 32
    1e0e:	51 e4       	ldi	r21, 0x41	; 65
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <hamoksha+0x116>
    1e2a:	80 e9       	ldi	r24, 0x90	; 144
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <hamoksha+0x104>
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <hamoksha+0xf8>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <hamoksha+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	6f 81       	ldd	r22, Y+7	; 0x07
    1e54:	78 85       	ldd	r23, Y+8	; 0x08
    1e56:	89 85       	ldd	r24, Y+9	; 0x09
    1e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <hamoksha+0x140>
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		CLCD_u8SendSpecialCharacter(0,Local_u8Hamoksha,5,1);
    1e7a:	28 e7       	ldi	r18, 0x78	; 120
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	b9 01       	movw	r22, r18
    1e82:	45 e0       	ldi	r20, 0x05	; 5
    1e84:	21 e0       	ldi	r18, 0x01	; 1
    1e86:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_u8SendSpecialCharacter>
		CLCD_u8SendSpecialCharacter(0,Local_u8HamokshaDANCE2,5,1);
    1e8a:	23 e9       	ldi	r18, 0x93	; 147
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	b9 01       	movw	r22, r18
    1e92:	45 e0       	ldi	r20, 0x05	; 5
    1e94:	21 e0       	ldi	r18, 0x01	; 1
    1e96:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_u8SendSpecialCharacter>


	CLCD_voidSendCmd(1);
	CLCD_voidGoToXY(0,0);
	CLCD_u8SendString("stopWatchIsOver");
	for(uint8 i=0;i<16;i++)
    1e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	8f 87       	std	Y+15, r24	; 0x0f
    1ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea2:	80 31       	cpi	r24, 0x10	; 16
    1ea4:	08 f4       	brcc	.+2      	; 0x1ea8 <hamoksha+0x176>
    1ea6:	5c cf       	rjmp	.-328    	; 0x1d60 <hamoksha+0x2e>
		//CLCD_voidSendCmd(1);


	}

}
    1ea8:	2f 96       	adiw	r28, 0x0f	; 15
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <main>:
#include "KPD_interface.h"
#include "stopwatch.h"


void main(void)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	ab 97       	sbiw	r28, 0x2b	; 43
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
	uint8 Localu8_Arr[8]={'0','0',':','0','0',':','0','0'};
    1ece:	ce 01       	movw	r24, r28
    1ed0:	42 96       	adiw	r24, 0x12	; 18
    1ed2:	9b a3       	std	Y+35, r25	; 0x23
    1ed4:	8a a3       	std	Y+34, r24	; 0x22
    1ed6:	e8 ed       	ldi	r30, 0xD8	; 216
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	fd a3       	std	Y+37, r31	; 0x25
    1edc:	ec a3       	std	Y+36, r30	; 0x24
    1ede:	f8 e0       	ldi	r31, 0x08	; 8
    1ee0:	fe a3       	std	Y+38, r31	; 0x26
    1ee2:	ec a1       	ldd	r30, Y+36	; 0x24
    1ee4:	fd a1       	ldd	r31, Y+37	; 0x25
    1ee6:	00 80       	ld	r0, Z
    1ee8:	8c a1       	ldd	r24, Y+36	; 0x24
    1eea:	9d a1       	ldd	r25, Y+37	; 0x25
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	9d a3       	std	Y+37, r25	; 0x25
    1ef0:	8c a3       	std	Y+36, r24	; 0x24
    1ef2:	ea a1       	ldd	r30, Y+34	; 0x22
    1ef4:	fb a1       	ldd	r31, Y+35	; 0x23
    1ef6:	00 82       	st	Z, r0
    1ef8:	8a a1       	ldd	r24, Y+34	; 0x22
    1efa:	9b a1       	ldd	r25, Y+35	; 0x23
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	9b a3       	std	Y+35, r25	; 0x23
    1f00:	8a a3       	std	Y+34, r24	; 0x22
    1f02:	9e a1       	ldd	r25, Y+38	; 0x26
    1f04:	91 50       	subi	r25, 0x01	; 1
    1f06:	9e a3       	std	Y+38, r25	; 0x26
    1f08:	ee a1       	ldd	r30, Y+38	; 0x26
    1f0a:	ee 23       	and	r30, r30
    1f0c:	51 f7       	brne	.-44     	; 0x1ee2 <main+0x28>

	uint8 Local_u8Pattern[8] = {0b00000100, 0b00001110, 0b00010101, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0};
    1f0e:	ce 01       	movw	r24, r28
    1f10:	4a 96       	adiw	r24, 0x1a	; 26
    1f12:	98 a7       	std	Y+40, r25	; 0x28
    1f14:	8f a3       	std	Y+39, r24	; 0x27
    1f16:	e0 ed       	ldi	r30, 0xD0	; 208
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	fa a7       	std	Y+42, r31	; 0x2a
    1f1c:	e9 a7       	std	Y+41, r30	; 0x29
    1f1e:	f8 e0       	ldi	r31, 0x08	; 8
    1f20:	fb a7       	std	Y+43, r31	; 0x2b
    1f22:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f24:	fa a5       	ldd	r31, Y+42	; 0x2a
    1f26:	00 80       	ld	r0, Z
    1f28:	89 a5       	ldd	r24, Y+41	; 0x29
    1f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	9a a7       	std	Y+42, r25	; 0x2a
    1f30:	89 a7       	std	Y+41, r24	; 0x29
    1f32:	ef a1       	ldd	r30, Y+39	; 0x27
    1f34:	f8 a5       	ldd	r31, Y+40	; 0x28
    1f36:	00 82       	st	Z, r0
    1f38:	8f a1       	ldd	r24, Y+39	; 0x27
    1f3a:	98 a5       	ldd	r25, Y+40	; 0x28
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	98 a7       	std	Y+40, r25	; 0x28
    1f40:	8f a3       	std	Y+39, r24	; 0x27
    1f42:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f44:	91 50       	subi	r25, 0x01	; 1
    1f46:	9b a7       	std	Y+43, r25	; 0x2b
    1f48:	eb a5       	ldd	r30, Y+43	; 0x2b
    1f4a:	ee 23       	and	r30, r30
    1f4c:	51 f7       	brne	.-44     	; 0x1f22 <main+0x68>
	uint8 Localu8KeyPadKey;
	PORT_voidInit();
    1f4e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <PORT_voidInit>
	CLCD_voidInit();
    1f52:	0e 94 98 06 	call	0xd30	; 0xd30 <CLCD_voidInit>


	while(1)
	{
		for(uint8 i =0;i<8;i++)
    1f56:	18 8a       	std	Y+16, r1	; 0x10
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <main+0xbc>
		{
			CLCD_voidSendData(Localu8_Arr[i]);
    1f5a:	88 89       	ldd	r24, Y+16	; 0x10
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	ce 01       	movw	r24, r28
    1f62:	42 96       	adiw	r24, 0x12	; 18
    1f64:	fc 01       	movw	r30, r24
    1f66:	e2 0f       	add	r30, r18
    1f68:	f3 1f       	adc	r31, r19
    1f6a:	80 81       	ld	r24, Z
    1f6c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
	CLCD_voidInit();


	while(1)
	{
		for(uint8 i =0;i<8;i++)
    1f70:	88 89       	ldd	r24, Y+16	; 0x10
    1f72:	8f 5f       	subi	r24, 0xFF	; 255
    1f74:	88 8b       	std	Y+16, r24	; 0x10
    1f76:	88 89       	ldd	r24, Y+16	; 0x10
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	78 f3       	brcs	.-34     	; 0x1f5a <main+0xa0>
		{
			CLCD_voidSendData(Localu8_Arr[i]);

		}
		for(uint8 i =0;i<8;i++)
    1f7c:	1f 86       	std	Y+15, r1	; 0x0f
    1f7e:	dc c0       	rjmp	.+440    	; 0x2138 <main+0x27e>
		{
			if(i==2 || i==5 )
    1f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f82:	82 30       	cpi	r24, 0x02	; 2
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <main+0xce>
    1f86:	d5 c0       	rjmp	.+426    	; 0x2132 <main+0x278>
    1f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8a:	85 30       	cpi	r24, 0x05	; 5
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <main+0xd6>
    1f8e:	d1 c0       	rjmp	.+418    	; 0x2132 <main+0x278>
				//do no thing

			}
			else
			{
				CLCD_u8SendSpecialCharacter(0,Local_u8Pattern,i,1);
    1f90:	9e 01       	movw	r18, r28
    1f92:	26 5e       	subi	r18, 0xE6	; 230
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	b9 01       	movw	r22, r18
    1f9a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f9c:	21 e0       	ldi	r18, 0x01	; 1
    1f9e:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_u8SendSpecialCharacter>
				do
				{
					Localu8KeyPadKey= KPD_u8GetPressedKey();
    1fa2:	0e 94 35 0c 	call	0x186a	; 0x186a <KPD_u8GetPressedKey>
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
				}
				while(Localu8KeyPadKey == 0xff);
    1fa8:	89 89       	ldd	r24, Y+17	; 0x11
    1faa:	8f 3f       	cpi	r24, 0xFF	; 255
    1fac:	d1 f3       	breq	.-12     	; 0x1fa2 <main+0xe8>
				if(Localu8KeyPadKey =='+')
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	8b 32       	cpi	r24, 0x2B	; 43
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <main+0xfc>
    1fb4:	91 c0       	rjmp	.+290    	; 0x20d8 <main+0x21e>
				{
					i--;
    1fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb8:	81 50       	subi	r24, 0x01	; 1
    1fba:	8f 87       	std	Y+15, r24	; 0x0f
					if(i==2 || i==5 )
    1fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	21 f0       	breq	.+8      	; 0x1fca <main+0x110>
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	85 30       	cpi	r24, 0x05	; 5
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <main+0x110>
    1fc8:	41 c0       	rjmp	.+130    	; 0x204c <main+0x192>
					{

						i--;
    1fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fcc:	81 50       	subi	r24, 0x01	; 1
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
						CLCD_voidGoToXY(i+2,1);
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	8e 5f       	subi	r24, 0xFE	; 254
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
						CLCD_voidSendData(' ');
    1fda:	80 e2       	ldi	r24, 0x20	; 32
    1fdc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
						CLCD_u8SendSpecialCharacter(0,Local_u8Pattern,i,1);
    1fe0:	9e 01       	movw	r18, r28
    1fe2:	26 5e       	subi	r18, 0xE6	; 230
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	b9 01       	movw	r22, r18
    1fea:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fec:	21 e0       	ldi	r18, 0x01	; 1
    1fee:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_u8SendSpecialCharacter>
						do
						{
							Localu8KeyPadKey= KPD_u8GetPressedKey();
    1ff2:	0e 94 35 0c 	call	0x186a	; 0x186a <KPD_u8GetPressedKey>
    1ff6:	89 8b       	std	Y+17, r24	; 0x11
						}
						while(Localu8KeyPadKey == 0xff);
    1ff8:	89 89       	ldd	r24, Y+17	; 0x11
    1ffa:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffc:	d1 f3       	breq	.-12     	; 0x1ff2 <main+0x138>
						Localu8_Arr[i]=Localu8KeyPadKey;
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	ce 01       	movw	r24, r28
    2006:	42 96       	adiw	r24, 0x12	; 18
    2008:	fc 01       	movw	r30, r24
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	89 89       	ldd	r24, Y+17	; 0x11
    2010:	80 83       	st	Z, r24
						CLCD_voidGoToXY(i,0);
    2012:	8f 85       	ldd	r24, Y+15	; 0x0f
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
						CLCD_voidSendNumber(Localu8_Arr[i]);
    201a:	8f 85       	ldd	r24, Y+15	; 0x0f
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	ce 01       	movw	r24, r28
    2022:	42 96       	adiw	r24, 0x12	; 18
    2024:	fc 01       	movw	r30, r24
    2026:	e2 0f       	add	r30, r18
    2028:	f3 1f       	adc	r31, r19
    202a:	80 81       	ld	r24, Z
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
						CLCD_voidGoToXY(i,1);
    203c:	8f 85       	ldd	r24, Y+15	; 0x0f
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
						CLCD_voidSendData(' ');
    2044:	80 e2       	ldi	r24, 0x20	; 32
    2046:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    204a:	73 c0       	rjmp	.+230    	; 0x2132 <main+0x278>

					}
					else if ((Localu8KeyPadKey >= 0) &&( Localu8KeyPadKey <= 9))
    204c:	89 89       	ldd	r24, Y+17	; 0x11
    204e:	8a 30       	cpi	r24, 0x0A	; 10
    2050:	08 f0       	brcs	.+2      	; 0x2054 <main+0x19a>
    2052:	3e c0       	rjmp	.+124    	; 0x20d0 <main+0x216>
					{
						CLCD_voidGoToXY(i+1,1);
    2054:	8f 85       	ldd	r24, Y+15	; 0x0f
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
						CLCD_voidSendData(' ');
    205e:	80 e2       	ldi	r24, 0x20	; 32
    2060:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
						CLCD_u8SendSpecialCharacter(0,Local_u8Pattern,i,1);
    2064:	9e 01       	movw	r18, r28
    2066:	26 5e       	subi	r18, 0xE6	; 230
    2068:	3f 4f       	sbci	r19, 0xFF	; 255
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	b9 01       	movw	r22, r18
    206e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_u8SendSpecialCharacter>
						do
						{
							Localu8KeyPadKey= KPD_u8GetPressedKey();
    2076:	0e 94 35 0c 	call	0x186a	; 0x186a <KPD_u8GetPressedKey>
    207a:	89 8b       	std	Y+17, r24	; 0x11
						}
						while(Localu8KeyPadKey == 0xff);
    207c:	89 89       	ldd	r24, Y+17	; 0x11
    207e:	8f 3f       	cpi	r24, 0xFF	; 255
    2080:	d1 f3       	breq	.-12     	; 0x2076 <main+0x1bc>
						Localu8_Arr[i]=Localu8KeyPadKey;
    2082:	8f 85       	ldd	r24, Y+15	; 0x0f
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	ce 01       	movw	r24, r28
    208a:	42 96       	adiw	r24, 0x12	; 18
    208c:	fc 01       	movw	r30, r24
    208e:	e2 0f       	add	r30, r18
    2090:	f3 1f       	adc	r31, r19
    2092:	89 89       	ldd	r24, Y+17	; 0x11
    2094:	80 83       	st	Z, r24
						CLCD_voidGoToXY(i,0);
    2096:	8f 85       	ldd	r24, Y+15	; 0x0f
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
						CLCD_voidSendNumber(Localu8_Arr[i]);
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	ce 01       	movw	r24, r28
    20a6:	42 96       	adiw	r24, 0x12	; 18
    20a8:	fc 01       	movw	r30, r24
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	80 81       	ld	r24, Z
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e0       	ldi	r26, 0x00	; 0
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
						CLCD_voidGoToXY(i,1);
    20c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
						CLCD_voidSendData(' ');
    20c8:	80 e2       	ldi	r24, 0x20	; 32
    20ca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    20ce:	31 c0       	rjmp	.+98     	; 0x2132 <main+0x278>
					}
					else
					{
						i--;
    20d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d2:	81 50       	subi	r24, 0x01	; 1
    20d4:	8f 87       	std	Y+15, r24	; 0x0f
    20d6:	2d c0       	rjmp	.+90     	; 0x2132 <main+0x278>

					}
				}
				else if ((Localu8KeyPadKey >= 0) &&( Localu8KeyPadKey <= 9))
    20d8:	89 89       	ldd	r24, Y+17	; 0x11
    20da:	8a 30       	cpi	r24, 0x0A	; 10
    20dc:	38 f5       	brcc	.+78     	; 0x212c <main+0x272>
				{
					Localu8_Arr[i]=Localu8KeyPadKey;
    20de:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	ce 01       	movw	r24, r28
    20e6:	42 96       	adiw	r24, 0x12	; 18
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	89 89       	ldd	r24, Y+17	; 0x11
    20f0:	80 83       	st	Z, r24

					CLCD_voidGoToXY(i,0);
    20f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
					CLCD_voidSendNumber(Localu8_Arr[i]);
    20fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	ce 01       	movw	r24, r28
    2102:	42 96       	adiw	r24, 0x12	; 18
    2104:	fc 01       	movw	r30, r24
    2106:	e2 0f       	add	r30, r18
    2108:	f3 1f       	adc	r31, r19
    210a:	80 81       	ld	r24, Z
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 e0       	ldi	r26, 0x00	; 0
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
					CLCD_voidGoToXY(i,1);
    211c:	8f 85       	ldd	r24, Y+15	; 0x0f
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <CLCD_voidGoToXY>
					CLCD_voidSendData(' ');
    2124:	80 e2       	ldi	r24, 0x20	; 32
    2126:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    212a:	03 c0       	rjmp	.+6      	; 0x2132 <main+0x278>
				}
				else
				{
					i--;
    212c:	8f 85       	ldd	r24, Y+15	; 0x0f
    212e:	81 50       	subi	r24, 0x01	; 1
    2130:	8f 87       	std	Y+15, r24	; 0x0f
		for(uint8 i =0;i<8;i++)
		{
			CLCD_voidSendData(Localu8_Arr[i]);

		}
		for(uint8 i =0;i<8;i++)
    2132:	8f 85       	ldd	r24, Y+15	; 0x0f
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	8f 87       	std	Y+15, r24	; 0x0f
    2138:	8f 85       	ldd	r24, Y+15	; 0x0f
    213a:	88 30       	cpi	r24, 0x08	; 8
    213c:	08 f4       	brcc	.+2      	; 0x2140 <main+0x286>
    213e:	20 cf       	rjmp	.-448    	; 0x1f80 <main+0xc6>

				}
			}
		}

		scan(Localu8_Arr);
    2140:	ce 01       	movw	r24, r28
    2142:	42 96       	adiw	r24, 0x12	; 18
    2144:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <scan>
		do
		{
			Localu8KeyPadKey= KPD_u8GetPressedKey();
    2148:	0e 94 35 0c 	call	0x186a	; 0x186a <KPD_u8GetPressedKey>
    214c:	89 8b       	std	Y+17, r24	; 0x11
		}
		while(Localu8KeyPadKey == 0xff);
    214e:	89 89       	ldd	r24, Y+17	; 0x11
    2150:	8f 3f       	cpi	r24, 0xFF	; 255
    2152:	d1 f3       	breq	.-12     	; 0x2148 <main+0x28e>
		if (Localu8KeyPadKey=='=')
    2154:	89 89       	ldd	r24, Y+17	; 0x11
    2156:	8d 33       	cpi	r24, 0x3D	; 61
    2158:	29 f4       	brne	.+10     	; 0x2164 <main+0x2aa>
		{

			//	CLCD_voidSendNumber(Localu8_Arr[1]);

			startStopWatch();
    215a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <startStopWatch>
			hamoksha();
    215e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <hamoksha>
    2162:	03 c0       	rjmp	.+6      	; 0x216a <main+0x2b0>
		}
		else
		{

			CLCD_voidSendCmd(1);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	aa ef       	ldi	r26, 0xFA	; 250
    2170:	b3 e4       	ldi	r27, 0x43	; 67
    2172:	8b 87       	std	Y+11, r24	; 0x0b
    2174:	9c 87       	std	Y+12, r25	; 0x0c
    2176:	ad 87       	std	Y+13, r26	; 0x0d
    2178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	6b 85       	ldd	r22, Y+11	; 0x0b
    217c:	7c 85       	ldd	r23, Y+12	; 0x0c
    217e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2180:	9e 85       	ldd	r25, Y+14	; 0x0e
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a e7       	ldi	r20, 0x7A	; 122
    2188:	55 e4       	ldi	r21, 0x45	; 69
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8f 83       	std	Y+7, r24	; 0x07
    2194:	98 87       	std	Y+8, r25	; 0x08
    2196:	a9 87       	std	Y+9, r26	; 0x09
    2198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <main+0x302>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <main+0x380>
	else if (__tmp > 65535)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <main+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <main+0x362>
    21fe:	80 e9       	ldi	r24, 0x90	; 144
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <main+0x350>
    220e:	9c 83       	std	Y+4, r25	; 0x04
    2210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <main+0x344>
    2224:	98 ce       	rjmp	.-720    	; 0x1f56 <main+0x9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	9a 83       	std	Y+2, r25	; 0x02
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <main+0x38c>
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	83 ce       	rjmp	.-762    	; 0x1f56 <main+0x9c>

00002250 <__udivmodsi4>:
    2250:	a1 e2       	ldi	r26, 0x21	; 33
    2252:	1a 2e       	mov	r1, r26
    2254:	aa 1b       	sub	r26, r26
    2256:	bb 1b       	sub	r27, r27
    2258:	fd 01       	movw	r30, r26
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <__udivmodsi4_ep>

0000225c <__udivmodsi4_loop>:
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	ee 1f       	adc	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	a2 17       	cp	r26, r18
    2266:	b3 07       	cpc	r27, r19
    2268:	e4 07       	cpc	r30, r20
    226a:	f5 07       	cpc	r31, r21
    226c:	20 f0       	brcs	.+8      	; 0x2276 <__udivmodsi4_ep>
    226e:	a2 1b       	sub	r26, r18
    2270:	b3 0b       	sbc	r27, r19
    2272:	e4 0b       	sbc	r30, r20
    2274:	f5 0b       	sbc	r31, r21

00002276 <__udivmodsi4_ep>:
    2276:	66 1f       	adc	r22, r22
    2278:	77 1f       	adc	r23, r23
    227a:	88 1f       	adc	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	1a 94       	dec	r1
    2280:	69 f7       	brne	.-38     	; 0x225c <__udivmodsi4_loop>
    2282:	60 95       	com	r22
    2284:	70 95       	com	r23
    2286:	80 95       	com	r24
    2288:	90 95       	com	r25
    228a:	9b 01       	movw	r18, r22
    228c:	ac 01       	movw	r20, r24
    228e:	bd 01       	movw	r22, r26
    2290:	cf 01       	movw	r24, r30
    2292:	08 95       	ret

00002294 <__divmodsi4>:
    2294:	97 fb       	bst	r25, 7
    2296:	09 2e       	mov	r0, r25
    2298:	05 26       	eor	r0, r21
    229a:	0e d0       	rcall	.+28     	; 0x22b8 <__divmodsi4_neg1>
    229c:	57 fd       	sbrc	r21, 7
    229e:	04 d0       	rcall	.+8      	; 0x22a8 <__divmodsi4_neg2>
    22a0:	d7 df       	rcall	.-82     	; 0x2250 <__udivmodsi4>
    22a2:	0a d0       	rcall	.+20     	; 0x22b8 <__divmodsi4_neg1>
    22a4:	00 1c       	adc	r0, r0
    22a6:	38 f4       	brcc	.+14     	; 0x22b6 <__divmodsi4_exit>

000022a8 <__divmodsi4_neg2>:
    22a8:	50 95       	com	r21
    22aa:	40 95       	com	r20
    22ac:	30 95       	com	r19
    22ae:	21 95       	neg	r18
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	4f 4f       	sbci	r20, 0xFF	; 255
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255

000022b6 <__divmodsi4_exit>:
    22b6:	08 95       	ret

000022b8 <__divmodsi4_neg1>:
    22b8:	f6 f7       	brtc	.-4      	; 0x22b6 <__divmodsi4_exit>
    22ba:	90 95       	com	r25
    22bc:	80 95       	com	r24
    22be:	70 95       	com	r23
    22c0:	61 95       	neg	r22
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	8f 4f       	sbci	r24, 0xFF	; 255
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	09 94       	ijmp

00002302 <__epilogue_restores__>:
    2302:	2a 88       	ldd	r2, Y+18	; 0x12
    2304:	39 88       	ldd	r3, Y+17	; 0x11
    2306:	48 88       	ldd	r4, Y+16	; 0x10
    2308:	5f 84       	ldd	r5, Y+15	; 0x0f
    230a:	6e 84       	ldd	r6, Y+14	; 0x0e
    230c:	7d 84       	ldd	r7, Y+13	; 0x0d
    230e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2310:	9b 84       	ldd	r9, Y+11	; 0x0b
    2312:	aa 84       	ldd	r10, Y+10	; 0x0a
    2314:	b9 84       	ldd	r11, Y+9	; 0x09
    2316:	c8 84       	ldd	r12, Y+8	; 0x08
    2318:	df 80       	ldd	r13, Y+7	; 0x07
    231a:	ee 80       	ldd	r14, Y+6	; 0x06
    231c:	fd 80       	ldd	r15, Y+5	; 0x05
    231e:	0c 81       	ldd	r16, Y+4	; 0x04
    2320:	1b 81       	ldd	r17, Y+3	; 0x03
    2322:	aa 81       	ldd	r26, Y+2	; 0x02
    2324:	b9 81       	ldd	r27, Y+1	; 0x01
    2326:	ce 0f       	add	r28, r30
    2328:	d1 1d       	adc	r29, r1
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	ed 01       	movw	r28, r26
    2336:	08 95       	ret

00002338 <_exit>:
    2338:	f8 94       	cli

0000233a <__stop_program>:
    233a:	ff cf       	rjmp	.-2      	; 0x233a <__stop_program>
